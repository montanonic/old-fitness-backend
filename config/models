-- | Yesod automatically generates Primary Keys (ID's) for each Table row, so
-- | the data below does not have to explicitly encode it. The reference to a
-- | Row's primary key will just be the table-name + 'Id'. So, to reference a
-- | user's unique ID, you'd write `UserId`.
-- |
-- | The basic table syntax is a capitalized table-name, followed by indented
-- | entries, each specifying a row Field (the first word), and the Value for
-- | that Field (the second word, which corresponds to a PSQL data type).
-- |
-- | For more information on the syntax used here, see:
-- | https://github.com/yesodweb/persistent/wiki/Persistent-entity-syntax
-- | The "Conversion table" from that link contains all of the standard
-- | Persistent data types.
-- |
-- | Data types that are not specified in the "Conversion table" are types
-- | created specifically for this application, know as "Sum types". For
-- | example, `Gender` is not a standard Persistent Value. All such data is
-- | created in the Model/Data/ directory. Please consult it for more
-- | information about the usage of a specific data type.
-- |
-- | Most tables will contain `createdAt` and `updatedAt` fields. The latter
-- | will be NULL upon creation. Fields in the table which allow UPDATE
-- | actions will be listed in the comment to `updatedAt`.
-- |
-- | If you want to search for a particular table, prefix it with # and then
-- | search. For example, `#Friendship` will take you to the Friendship table.
-- |
-- | If a table has an updatedAt field, it can be Updated. Otherwise, it allows
-- | only Creation and Reading (querying). If deletion is allowed, it have a
-- | 'can delete' comment.
-- |
-- | If a table has documentation on it, there will be a 'documented' comment
-- | next to its search tag. Consult the documentation/Model/ directory.
-- |
-- | If a field uses a custom data type, the table comment will have a 'data'
-- | entry followed by a list of all custom datatypes used in the table.


-- TODO:

-- Add entities for logging message/comment data, so that we can have edit
-- histories.

-- Add logging entities for likes.

-- Figure out if it's better for like entities to be separated to be specific
-- to comments or posts, or to be consolidated into a single Like entity with
-- NULLable fields referring either to a CommentId or PostId, as it is now.



--------------------------------------------------------------------------------

------------------------------------USER INFO-----------------------------------

--------------------------------------------------------------------------------
--#User ; documented

-- | I've split the previous User model into User and Profile now to allow for
-- easier integration with Yesod's authentication plugins. This is definitely
-- a work in progress and can easily be reverted. However, it does seem to be
-- an intelligent idea to have a table devoted solely to a user's identity.
-- The information in Profile cannot be verified, aside from the email. We may
-- consider moving the email and password fields into this

User
    ident Text -- Authentication data. Under Persona this will be their email.
      -- Other Authentication services do not use an email for their unique
      -- tokens. Hence, we should include an `email` field when adding other
      -- authentication methods.

    createdAt UTCTime
    updatedAt UTCTime Maybe -- Allowed fields: ident.

    UniqueUser ident

    deriving Typeable Read Eq Show
--------------------------------------------------------------------------------
--#Profile ; data: Gender ; documented

-- | This is what the old User entity used to be, but it now references the new
-- User table, which stores the unique identifying information for that person.

Profile
    user UserId

    firstName Text
    lastName Text

    -- email Text -- User ident is the email. For now.

    -- unverifiedEmail Text -- this field is used solely for
      -- accounts which have not yet been authenticated. Upon authentication,
      -- this field is converted to NULL (Nothing, in Haskell). The reason for
      -- this field's existence, instead of a simple `isValidated` field, is
      -- documented in `UserInfo.md`.
      --
      -- I've decided to omit this field for now and worry about it when
      -- we start integrating the iOS app into this backend.

    -- password Text -- This field is basically unnecessary
      -- for the browser version of the app.

    dateOfBirth Day
    gender Gender -- See Model/Data/Gender

    -- lastLogin UTCTime -- updatedAt actually gives us the same
      -- functionality

    createdAt UTCTime
    updatedAt UTCTime Maybe -- Allowed fields: ALL

    UniqueProfile user -- This makes it easy to fetch all profile info with a
      -- UserId. We can easily get that Id with maybeAuthId

    deriving Read Show Eq

--------------------------------------------------------------------------------
--#ProfileLog ; data: UserUpdate

-- | Prevents data loss from meaningful changes to the Profile entity. Currently
-- omits logging of LogIns and LogOuts, as that seems a bit overboard;
-- however it may be worth discussing the potential value of such a feature.
--
-- Every log action here is an UPDATE.

ProfileLog
    user UserId

    action ProfileUpdate -- UpdateFirstName, UpdateLastName, UpdateEmail,
      -- UpdateDateOfBirth, UpdateGender.
    previousValue Text -- all values are converted to text so that we don't
      -- have to use multiple fields to satisfy differing data types.

    createdAt UTCTime -- These logs are recorded at the same time a change
      -- is made. Hence, this is the timestamp of the change.

--------------------------------------------------------------------------------
--#Friendship ; documented

Friendship
    firstUser UserId -- This *must always* be the user who *sent* the friend
      -- request
    secondUser UserId

    becameFriends UTCTime Maybe -- if NULL, the first user sent a request, and
      -- the second never accepted.

    whoDefriended UserId Maybe -- if this field is NOT NULL, the Friendship is
      -- deactivated, but we do not delete it.

    createdAt UTCTime
    updatedAt UTCTime Maybe -- Allowed fields: becameFriends, whoDefriended.

    UniqueFriendship firstUser secondUser -- in queries we might need to also
      -- search for UniqueFriendship secondUser firstUser as well, to ensure
      -- that we find the relationship. Just a reminder in case behavior is
      -- ever buggy in this table.

--------------------------------------------------------------------------------
--#FriendshipLog ; data: FriendshipAction ; documented in Models.md

-- | The idea with this is to make sure that we have a full history of any
-- Friendship-level actions.
-- Logging will only occur when a field in Friendship is overwritten.

FriendshipLog
    friendship FriendshipId
    user UserId -- who performed the action

    action FriendshipAction -- SendRequest, AcceptRequest, or Defriend.
    timestamp UTCTime

    createdAt UTCTime -- When the log was recorded is distinct from when
      -- the action was made (the 'timestamp'). These values should never be
      -- identical, as logs are not made at the same time actions are taken.

--------------------------------------------------------------------------------

----------------------------------CONVERSATIONS---------------------------------

--------------------------------------------------------------------------------
--#ConversationUser ; documented

-- | Points a User to a Conversation. When created the isActive field will be
-- true, indicating that they will receive updates to the conversation and it
-- will remain visible to them.

ConversationUser
    conversation ConversationId
    user UserId

    isActive Bool -- This field determines if the user will have the
      -- conversation displayed in their messages tab within the App.
      -- See documentation for more information on how this field is used.

    createdAt UTCTime
    updatedAt UTCTime Maybe -- Allowed fields: isActive.
      -- If this field is not null, and isActive is false, the user de-activated
      -- the conversation at this time; if isActive is true, then the user at
      -- one point de-activated the conversation, and re-activated it at this
      -- time.

    UniqueConversationUser conversation user -- only 1 user per conversation

--------------------------------------------------------------------------------
--#ConversationMessage ; documented

-- | A single conversation contains 1 or more messages. This table contains
-- each message, along with the Conversation it points to.

ConversationMessage
    conversation ConversationId
    content Text
    author UserId

    createdAt UTCTime
    updatedAt UTCTime Maybe -- Allowed fields: message(?).
        -- non-null entries in this field will indicate the time the last edit
        -- was made to a message (supposing we allow edits)

--------------------------------------------------------------------------------
--#Conversation ; documented

-- | The entries for this table are sparse. That's because it will be used in
-- SQL Joins to link between the ConversationUsers and ConversationMessages.
-- See the documentation for more information.

Conversation
    createdAt UTCTime -- conversations will be created when a user first sends a
      -- ConversationMessage to one or more users.
    updatedAt UTCTime Maybe
      -- this field will be updated every time a new message is posted to the
      -- conversation.
      -- Depending on how well this works, we may want to get rid of this field
      -- entirely and get this information solely from the most recent
      -- ConversationMessage entity.

--------------------------------------------------------------------------------

--------------------------------NEWS FEED / WALLS-------------------------------

--------------------------------------------------------------------------------
--#Like

Like
    liker UserId

    -- The following does not seem to be the most elegant solution to the
    -- problem of connecting a Like to either a Post or a PostComment.

    -- RULE: A Like can refer to EITHER a Post or a PostComment. Hence, one of
    -- these fields must remain NULL.
    post PostId Maybe
    comment PostCommentId Maybe

    createdAt UTCTime

--------------------------------------------------------------------------------
--#PostComment

-- | I know this sounds like an action but it is not; it should be read as a
-- noun, not a verb. This table references Post Comments to an actual Post
-- (identified by the Post table). This is a many-to-one relationship.

-- Currently lacks support for Media types.

PostComment
    post PostId
    content Text
    author UserId

    likeCount Int

    -- Unimplemented but we may want to allow for nested comments.
    --nestedUnder PostCommentId Maybe -- Used only if this comment is nested
      -- under another comment, rather than being a top-level comment to the
      -- Post itself.

    createdAt UTCTime
    updatedAt UTCTime Maybe -- Allowed fields: content(?).

--------------------------------------------------------------------------------
--#Post

-- Currently lacks support for Media types.

Post
    author UserId
    content Text

    commentCount Int
    likeCount Int

    createdAt UTCTime
    updatedAt UTCTime Maybe -- Allowed fields: content(?).

--------------------------------------------------------------------------------

--------------------------------------MEDIA-------------------------------------

--------------------------------------------------------------------------------
--#Image

Image
    content ByteString
    title Text Maybe -- "Untitled" if NULL
    uploadedBy UserId

--------------------------------------------------------------------------------
--#Video

Video
    content ByteString
    title Text Maybe -- "Untitled" if NULL
    uploadedBy UserId
